from aiogram import types
from misc import dp, bot
import sqlite3
import asyncio

from .sqlit import members_list,add_urlmetka,info_metki,dannie_metki
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


ADMIN_ID_1 =  1307813926

ADMIN_ID =[ADMIN_ID_1]

class trek_reg(StatesGroup):
    trek_name = State()
    trek_fname = State()


class st_reg(StatesGroup):
    st_name = State()
    st_fname = State()
    step_q = State()
    step_regbutton = State()



@dp.message_handler(commands=['admin'])
async def admin_ka(message: types.Message):
    id = message.from_user.id
    if id in ADMIN_ID:
        markup = types.InlineKeyboardMarkup()
        bat_a = types.InlineKeyboardButton(text='–¢—Ä–∞—Ñ–∏–∫', callback_data='list_members')
        bat_e = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='write_message')
        bat_j = types.InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –±–∞–∑—É', callback_data='baza')
        bat_setin = types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫', callback_data='settings')
        markup.add(bat_a,bat_e,bat_j)
        markup.add(bat_setin)
        await bot.send_message(message.chat.id,'–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',reply_markup=markup)


########################################################### –ù–ê–°–¢–†–û–ô–ö–ê –¢–†–ï–ö–ï–†–ê
@dp.callback_query_handler(text='settings')
async def settings_trek(call: types.callback_query):
    markup1 = types.InlineKeyboardMarkup()
    bat_1 = types.InlineKeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏', callback_data='fgdfkjk')
    bat_3 = types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ç–æ–∫', callback_data='list_metok')
    bat_2 = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='exit1')
    markup1.add(bat_1)
    markup1.add(bat_3)
    markup1.add(bat_2)

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞–º–∏',reply_markup=markup1)


#–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –º–µ—Ç–æ–∫
@dp.callback_query_handler(text='list_metok',state='*')
async def cheak_metki(call: types.callback_query, state: FSMContext):
    metki = info_metki()
    for i in metki:
        dann = dannie_metki(i[0])
        await bot.send_message(chat_id=call.message.chat.id, text=f'<b>–ú–µ—Ç–∫–∞:</b> https://t.me/QiwiWall_bot?start={i[0]}\n'
                                                                  f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {i[1]}\n\n'
                                                                  f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {dann[0]}</b>\n'
                                                                  f'<b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–Ω–µ–≥</b>: {dann[1]}',parse_mode='html')
        await asyncio.sleep(1)

# –ù–ê–°–¢–†–û–ô–ö–ê –ú–µ—Ç–∫–∏
@dp.callback_query_handler(text='exit1',state='*')
async def otmena_vsego(call: types.callback_query, state: FSMContext):
    try: await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
    except: pass
    await bot.send_message(call.message.chat.id,text='–û–¢–ú–ï–ù–ï–ù–û')
    await state.finish()


@dp.callback_query_handler(text='fgdfkjk')
async def addbutton(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
    await bot.send_message(call.message.chat.id,text='–û—Ç–ø—Ä–∞–≤—å –º–µ—Ç–∫—É')
    await trek_reg.trek_name.set()

@dp.message_handler(state=trek_reg.trek_name,content_types=['text']) # –¢–µ–∫—Å—Ç –ú–µ—Ç–∫–∏
async def trek_get_metka(message: types.Message, state: FSMContext):
    await state.update_data(url_m=message.text)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç url –º–µ—Ç–∫–∏
    await bot.send_message(chat_id=message.chat.id,text='–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –º–µ—Ç–∫–µ')
    await trek_reg.trek_fname.set()

@dp.message_handler(state=trek_reg.trek_fname,content_types=['text']) # –û–ø–∏—Å–∞–Ω–∏–µ –ú–µ—Ç–∫–∏
async def trek_get_opisanie_metka(message: types.Message, state: FSMContext):
    await state.update_data(text_m=message.text)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è url –º–µ—Ç–∫–∏

    markup_met = types.InlineKeyboardMarkup()
    bat_11 = types.InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data='reg_metka')
    bat_22 = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='exit1')
    markup_met.add(bat_11)
    markup_met.add(bat_22)

    data = await state.get_data()
    metka_url = data['url_m']

    await bot.send_message(message.chat.id, text=f'<b>–ú–µ—Ç–∫–∞:</b> {metka_url}\n\n'
                                                 f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {message.text}',reply_markup=markup_met,parse_mode='html')


@dp.callback_query_handler(text='reg_metka',state=trek_reg.trek_fname)
async def reg_metka(call: types.callback_query, state: FSMContext):
    data = await state.get_data()
    metka_url = data['url_m']
    text_m = data['text_m']
    add_urlmetka(metka_url,text_m) # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–¥ –º–µ—Ç–∫–∏
    await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
    await bot.send_message(chat_id=call.message.chat.id, text='–ú–µ—Ç–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞')
    await state.finish()



######################
@dp.callback_query_handler(text='baza')
async def baza(call: types.callback_query):
    a = open('server.db','rb')
    await bot.send_document(chat_id=call.message.chat.id, document=a)


@dp.callback_query_handler(text='list_members')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –¢–†–ê–§–ò–ö–ê
async def check(call: types.callback_query):
    a = members_list() # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ sqlit
    await bot.send_message(call.message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {a}')


########################  –†–∞—Å—Å—ã–ª–∫–∞  ################################

@dp.callback_query_handler(text='write_message')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    murkap.add(bat0)
    await bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º',
                           reply_markup=murkap)
    await st_reg.step_q.set()


@dp.callback_query_handler(text='otemena',state='*')
async def otmena_12(call: types.callback_query, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()



@dp.message_handler(state=st_reg.step_q,content_types=['text','photo','video','video_note']) # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
async def redarkt_post(message: types.Message, state: FSMContext):
    await st_reg.st_name.set()
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
    bat2 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', callback_data='add_but')
    murkap.add(bat1)
    murkap.add(bat2)
    murkap.add(bat0)

    await message.copy_to(chat_id=message.chat.id)
    q = message
    await state.update_data(q=q)

    await bot.send_message(chat_id=message.chat.id,text='–ü–æ—Å—Ç —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üëÜ',reply_markup=murkap)



# –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–û–ö
@dp.callback_query_handler(text='add_but',state=st_reg.st_name) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
async def addbutton(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
    await bot.send_message(call.message.chat.id,text='–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Controller Bot\n\n'
                                                     '–ü–æ–∫–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É')
    await st_reg.step_regbutton.set()


@dp.message_handler(state=st_reg.step_regbutton,content_types=['text']) # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–µ
async def redarkt_button(message: types.Message, state: FSMContext):
    arr2 = message.text.split('-')

    k = -1  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∫–Ω–æ–ø–æ–∫
    for i in arr2:
        k+=1
        if i[0] == ' ':
            if i[-1] == ' ':
                arr2[k] = (i[1:-1])
            else:
                arr2[k] = (i[1:])

        else:
            if i[-1] == ' ':

                arr2[0] = (i[:-1])
            else:
                pass

    # arr2 - –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏


    try:
        murkap = types.InlineKeyboardMarkup() #–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bat = types.InlineKeyboardButton(text= arr2[0], url=arr2[1])
        murkap.add(bat)

        data = await state.get_data()
        mess = data['q']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

        await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id,message_id=mess.message_id,reply_markup=murkap)

        await state.update_data(text_but =arr2[0]) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞
        await state.update_data(url_but=arr2[1])  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞

        murkap2 = types.InlineKeyboardMarkup() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –º–µ–Ω—é
        bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
        bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
        murkap2.add(bat1)
        murkap2.add(bat0)

        await bot.send_message(chat_id=message.chat.id,text='–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫‚òù',reply_markup=murkap2)


    except:
        await bot.send_message(chat_id=message.chat.id,text='–û—à–∏–±–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


# –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–û–ö


@dp.callback_query_handler(text='send_ras',state="*") # –†–∞—Å—Å—ã–ª–∫–∞
async def fname_step(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)

    data = await state.get_data()
    mess = data['q'] # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    try: #–ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤—É –ø—É—Å—Ç–æ–π
        text_but = data['text_but']
        url_but = data['url_but']
        bat = types.InlineKeyboardButton(text=text_but, url=url_but)
        murkap.add(bat)
    except: pass


    db = sqlite3.connect('server.db')
    sql = db.cursor()
    await state.finish()
    users = sql.execute("SELECT id FROM user_time").fetchall()
    bad = 0
    good = 0
    await bot.send_message(call.message.chat.id, f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(users)}</code></b>\n\n<b>–†–∞—Å—Å–ª—ã–∫–∞ –Ω–∞—á–∞—Ç–∞!</b>",
                           parse_mode="html")
    for i in users:
        await asyncio.sleep(1)
        try:
            await mess.copy_to(i[0],reply_markup=murkap)
            good += 1
        except:
            bad += 1

    await bot.send_message(
        call.message.chat.id,
        "<u>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n\n</u>"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(users)}</code>\n"
        f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{good}</code>\n"
        f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> <code>{bad}</code>",
        parse_mode="html"
    )
#########################################################